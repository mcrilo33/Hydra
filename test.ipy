#!/usr/bin/env python
# -*- coding: utf-8 -*-
# File              : test.py
# Author            : Mathieu Crilout <mathieucrilout@mail>
# Date              : 26.10.2018
# Last Modified Date: 26.10.2018
# Last Modified By  : Mathieu Crilout <mathieucrilout@mail>

##
with open('.opt.txt', 'r') as f:
    MUSIC_PATH = f.read()


MUSIC_DATABASE_PATH = os.path.join(MUSIC_PATH, '.music.json')

from tinydb import TinyDB, Query

music_db = TinyDB(MUSIC_DATABASE_PATH)

test = Query()

music_db.search(test.bitrate!=0)
#%%
##
from time import strptime, mktime
def dateStrToDatetime(date):

    assert type(date) is str, "date is not a string object: %r" % date

    if len(date)==4:
        return datetime.fromtimestamp(mktime(strptime(date, '%Y')))
    elif len(date)==7:
        return datetime.fromtimestamp(mktime(strptime(date, '%Y-%m')))
    else:
        return datetime.fromtimestamp(mktime(strptime(date, '%Y-%m-%d')))
def getMusicBrainzAlbums(artist_id, date):

    assert type(artist_id) is str, "artist_id is not a string: %r" % artist_typed
    assert type(date) is str, "date is not a string object: %r" % date

    albums = []
    if date != '':
        date = dateStrToDatetime(date)

    # get albums list
    url = """
        https://musicbrainz.org/ws/2/release-group?artist=%s&fmt=json&limit=100
    """ % (artist_id)
    response = (urllib.request.urlopen(url, timeout=10)).read()
    data = json.loads(response)
    total = data['release-group-count']
    releases = data['release-groups']
    local_count = 0
    count = 0
    while(count!=total):
        if local_count==len(releases):
            url = """
                https://musicbrainz.org/ws/2/release-group?artist=%s&fmt=json&limit=100&offset=%s
            """ % (artist_id, count)
            response = (urllib.request.urlopen(url, timeout=10)).read()
            data = json.loads(response)
            releases = data['release-groups']
            local_count = 0
        albums.append(releases[local_count])
        local_count += 1
        count += 1

    results = []
    for album in albums:
        album_date = album['first-release-date']
        if date == '':
            results.append((artist_id, album_date, album['title'], album['id']))
        elif date != '' and album_date != '':
            album_date_tmp =  dateStrToDatetime(album_date)
            if date <= album_date_tmp:
                results.append((artist_id, album_date, album['title'], album['id']))

    return results

#%%
##
from datetime import datetime, timedelta
with open('.opt.txt', 'r') as f:
    MUSIC_PATH = f.read()


ARTIST_DATABASE_PATH = os.path.join(MUSIC_PATH, '.artists.json')

from tinydb import TinyDB, Query

def downloadingRoutine():

    artist_db = TinyDB(ARTIST_DATABASE_PATH)

    test = Query()
    date = (datetime.now()\
        - timedelta(weeks=1)).strftime('%Y-%m-%d')
    artists = music_db.search(test.update_date > date)

    for artist in artists:
        # download new albums
        # download new torrents
        albums = getMusicBrainzAlbums(artist['artist_mbid'], date)
        import ipdb; ipdb.set_trace() 
downloadingRoutine()
#%%
